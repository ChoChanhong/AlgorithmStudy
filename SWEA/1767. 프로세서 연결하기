package SWEA_1767_프로세서연결하기;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Solution {

	static class Node { // y와 x좌표 그리고 갈 수 있는 방향의 갯수를 가진다.
		int y;
		int x;
		int cnt;

		public Node(int y, int x, int cnt) {
			this.y = y;
			this.x = x;
			this.cnt = cnt;
		}

	}

	static int N, T;
	static int[][] matrix; // core위치 정보를 담는다.
	static boolean[][] visit; // 선으로 연결할 때 선이 연결된 곳을 방문했다고 처리한다.
	static int[] dy = { -1, 1, 0, 0 }; // 4방 탐색
	static int[] dx = { 0, 0, -1, 1 };

	static PriorityQueue<Node> queue = new PriorityQueue<>((o1, o2) -> o1.cnt - o2.cnt); // 갈 수 있는 방향의 갯수에 따라 오름차순 정렬

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		T = Integer.parseInt(br.readLine());

		for (int t = 1; t <= T; t++) {
			N = Integer.parseInt(br.readLine());
			matrix = new int[N][N];
			StringTokenizer st = null;
			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++) {
					int n = Integer.parseInt(st.nextToken());
					matrix[i][j] = n;
				}
			}

			visit = new boolean[N][N];

			for (int i = 1; i < N - 1; i++) { // 가장자리는 바로 연결되는 것이므로 1부터 N-1까지 해준다.
				for (int j = 1; j < N - 1; j++) {
					if (matrix[i][j] == 1) { // core인 경우
						int vector = 0; // 가장자리까지 연결가능한 갯수
						for (int j2 = 0; j2 < 4; j2++) {
							for (int k = 1; k <= N; k++) { // core에서 한칸씩 멀어져 간다.
								int ny = i + dy[j2] * k;
								int nx = j + dx[j2] * k;
								if (ny < 0 || nx < 0 || ny >= N || nx >= N || matrix[ny][nx] != 0)
									break; // 범위를 벗어나거나 다른 core가 있을 경우 break;
								if (ny == 0 && matrix[ny][nx] == 0)
									vector++; // 그게 아니고 가장자리에 도착한다면 갯수추가
								if (nx == 0 && matrix[ny][nx] == 0)
									vector++;
								if (ny == N - 1 && matrix[ny][nx] == 0)
									vector++;
								if (nx == N - 1 && matrix[ny][nx] == 0)
									vector++;
							}
						}
						queue.offer(new Node(i, j, vector)); // 큐에 y,x좌표와 도착가능갯수를 넣어준다.
					}
				}
			}
			int sum = 0; // 최소 연결 거리
			while (!queue.isEmpty()) { // 큐에 있는것 만큼 돌린다.
				Node n = queue.poll();
				int min = Integer.MAX_VALUE; // core에서 방향마다 가장 작은 거리를 찾기 위해 min을 사용
				int vec = 0; // 최단 거리를 찾았을 때의 방향 인덱스 상,하,좌,우
				for (int i = 0; i < 4; i++) { // 4방 탐색하며 한칸씩 멀어진다.
					for (int j = 1; j <= N; j++) {
						int ny = n.y + dy[i] * j;
						int nx = n.x + dx[i] * j;
						if (ny < 0 || nx < 0 || ny >= N || nx >= N || matrix[ny][nx] != 0 || visit[ny][nx])
							break; // 범위를 초과했거나 core이거나 벌써 전선이 깔려있다면 break
						if (ny == 0 && matrix[ny][nx] == 0) { // 가장자리라면 최단거리인지 확인하고 최단거리라면 그때의 방향 인덱스를 vec에 저장
							if (min > j) {
								min = j;
								vec = i;
							}
							break;
						}
						if (nx == 0 && matrix[ny][nx] == 0) {
							if (min > j) {
								min = j;
								vec = i;
							}
							break;
						}
						if (ny == N - 1 && matrix[ny][nx] == 0) {
							if (min > j) {
								min = j;
								vec = i;
							}
							break;
						}
						if (nx == N - 1 && matrix[ny][nx] == 0) {
							if (min > j) {
								min = j;
								vec = i;
							}
							break;
						}
					}
				}
				for (int j = 1; j <= N; j++) { // 구한 방향인덱스로 다시 거리를 계산
					int ny = n.y + dy[vec] * j;
					int nx = n.x + dx[vec] * j;
					visit[ny][nx] = true; // 하지만 이때 방문 처리를 해준다. 위에서 해줄 경우 다른 코어에서 최단거리방향이 아닌 다른 방향으로 가는것도 방문처리를 하게되어 정답이
											// 나올수 없다.
					if (ny < 0 || nx < 0 || ny >= N || nx >= N || matrix[ny][nx] != 0)
						break; // 범위 초과하는지 본다.
					if (ny == 0 && matrix[ny][nx] == 0) { // 가장자리에 도착하면 거리를 sum에 더해준다.
						sum += j;
						break;
					}
					if (nx == 0 && matrix[ny][nx] == 0) {
						sum += j;
						break;
					}
					if (ny == N - 1 && matrix[ny][nx] == 0) {
						sum += j;
						break;
					}
					if (nx == N - 1 && matrix[ny][nx] == 0) {
						sum += j;
						break;
					}
				}
			}
			System.out.println("#" + t + " " + sum); // 출력
		}

	}
}
