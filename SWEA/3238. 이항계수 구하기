package SWEA_3238_이항계수구하기;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static int T;
	static long N, R, P;

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		T = Integer.parseInt(br.readLine());

		for (int t = 1; t <= T; t++) {
			StringTokenizer st = new StringTokenizer(br.readLine());

			N = Long.parseLong(st.nextToken());
			R = Long.parseLong(st.nextToken());
			P = Long.parseLong(st.nextToken());

			long a = 1;
			long b = 1;

			// N!을 구해준다.
			for (long i = 1; i <= N; i++) {
				a *= i;
				a %= P;
			}

			// R!을 구해준다.
			for (long i = 1; i <= R; i++) {
				b *= i;
				b %= P;
			}

			// (N-R)!을 구해준다.
			for (long i = 1; i <= N - R; i++) {
				b *= i;
				b %= P;
			}

			// 페르마의 소정리를 사용(b의 mod-2승 계산)
			long b2 = pow(b, P - 2);

			System.out.println("#" + t + " " + (a * b2) % P);
		}
	}

	static long pow(long a, long b) {
		if (b == 0)
			return 1;
		else if (b == 1)
			return a;

		if (b % 2 == 0) {
			long tmp = pow(a, b / 2) % P;
			return (tmp * tmp) % P;
		}

		long tmp = pow(a, b - 1) % P;
		return (tmp * a) % P;
	}

}
