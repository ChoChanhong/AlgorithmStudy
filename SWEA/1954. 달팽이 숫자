package SWEA_1954_달팽이숫자;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Solution {

	static int T; // 테스트 케이스 수
	static int N; // 달팽이의 크기
	static int[][] snail; // 달팽이 배열 선언

	// 우 -> 하 -> 좌 -> 상...
	static int[] dr = { 0, 1, 0, -1 };
	static int[] dc = { 1, 0, -1, 0 };

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		T = Integer.parseInt(br.readLine());

		for (int tc = 1; tc <= T; tc++) {
			N = Integer.parseInt(br.readLine());

			snail = new int[N][N]; // 달팽이 배열 크기 할당 및 초기화
			
			int r = 0; // 행 index
			int c = 0; // 열 index
			int dir = 0; // 방향을 잡아줌: 0(우), 1(하), 2(좌), 3(상)
			int num = 1; // 배열에 넣는 증가하는 수
			int size = N * N;
			
			
			// 풀이
			while ( true ) {
				if ( num > size ) break; // 숫자를 다 채우면 끝
				
				snail[r][c] = num++; // 달팽이 배열에 값 대입 후 num 증가

				// 우 -> 하 -> 좌 -> 상...순서
				// 방향 잡고 num값 증가시키며 대입하다가 막히면 방향을 바꾼다.
				if ( dir == 0 ) { // 우
					// 오른쪽 다음칸이 범위를 벗어나거나, 값이 있을 경우 방향을 아래로 바꾼다
					if ( c + dc[dir] >= N || snail[r][c + dc[dir]] != 0 ) dir = 1;
				} else if ( dir == 1 ) { // 하
					// 아래쪽 다음칸이 범위를 벗어나거나, 값이 있을 경우 방향을 왼쪽로 바꾼다
					if ( r + dr[dir] >= N || snail[r + dr[dir]][c] != 0 ) dir = 2;
				} else if ( dir == 2 ) { // 좌
					// 왼쪽 다음칸이 범위를 벗어나거나, 값이 있을 경우 방향을 위로 바꾼다
					if ( c + dc[dir] < 0 || snail[r][c + dc[dir]] != 0 ) dir = 3;
				} else if ( dir == 3 ) { // 상
					// 위쪽 다음칸이 범위를 벗어나거나, 값이 있을 경우 방향을 오른쪽로 바꾼다
					if ( r + dr[dir] < 0 || snail[r + dr[dir]][c] != 0 ) dir = 0;
				}
				
				// 다음 칸 이동
				r += dr[dir];
				c += dc[dir];

			}
			
			// 출력
			System.out.println("#" + tc);

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					System.out.print(snail[i][j] + " ");
				}
				System.out.println();
			}
		}
	}
}
