package BJ_1932_정수삼각형;

// #tc: triangle = { {7}, {3, 8}, {8, 1, 0}, {2, 7, 4, 4}, {4, 5, 2, 6, 5} }, result = 30;

public class Solution {

	public static void main(String[] args) {
		int[][] triangle = { { 7 }, { 3, 8 }, { 8, 1, 0 }, { 2, 7, 4, 4 }, { 4, 5, 2, 6, 5 } };
		int[][] dp = new int[triangle.length][triangle.length];

		System.out.println(solution(triangle));
	}

	static int[][] dp;
	static int[][] tri;

	public static int solution(int[][] triangle) {
		int N = triangle.length;

		dp = new int[N][N];
		tri = triangle.clone(); // triangle 배열을 static으로 사용하기위해 tri배열에 복사

		dp[N - 1] = tri[N - 1].clone(); // 가장 마지막 행의 값 복사

		return getNum(0, 0);
	}

	static int getNum(int depth, int index) {

		// 마지막 행이면 마지막 dp값 리턴
		if (depth == dp.length - 1) return dp[depth][index];

		// 방문안했으면 다음 깊이의 좌, 우 값 비교해서 큰 값이랑 더해준다.
		if (dp[depth][index] == 0) dp[depth][index] = Math.max(getNum(depth + 1, index), getNum(depth + 1, index + 1)) + tri[depth][index];

		return dp[depth][index];
	}
}
