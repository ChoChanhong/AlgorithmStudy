import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public static int[] solution(int[] progresses, int[] speeds) {

		int N = progresses.length; // 작업 수
		int[] days = new int[N]; // 작업일을 먼저 계산

		for (int i = 0; i < N; i++) {
			// day 구하고
			int day = (100 - progresses[i]) / speeds[i];
			if ((100 - progresses[i]) % speeds[i] > 0)
				day++;

			// days배열에 담음
			days[i] = day;
		}
		
		Queue<Integer> queue = new LinkedList<>(); // ans 내용을 담을 큐

		int cnt = 1;
		int idx = 0;

		for (int i = 1; i < N; i++) {
			// day가 다음 요소보다 크거나 같으면 cnt++
			
			if (days[idx] >=  days[i]) {
				cnt++;
			} else if ( days[idx] < days[i] ) {
				queue.offer(cnt);
				cnt = 1;
				idx = i;
			}
		}

		// days 마지막요소 처리
		queue.offer(cnt);

		int[] ans = new int[queue.size()];

		for (int i = 0; i < ans.length; i++) {
			ans[i] = queue.poll();
		}

		return ans;
	}
}
