package BJ_2606_바이러스;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_adjMatrix {
	static int V; // 정점
	static int E; // 간선
	static int ans = 0;

	static int[][] adjMatrix; // 인접 행렬
	static boolean[] isVisited; // 방문 체크

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		V = Integer.parseInt(br.readLine());
		E = Integer.parseInt(br.readLine());

		adjMatrix = new int[V + 1][V + 1]; // 0은 더미
		isVisited = new boolean[V + 1]; // 0은 더미

		for (int i = 1; i <= E; i++) {
			st = new StringTokenizer(br.readLine());

			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());

			adjMatrix[from][to] = adjMatrix[to][from] = 1;
		}

		bfs(1);
		System.out.println("bfs >> " + ans);
		
		ans = 0;
		Arrays.fill(isVisited, false);
		
		dfs(1);
		System.out.println("dfs >> " + ans);
	}

	static Queue<Integer> queue = new ArrayDeque<>();
	static void bfs(int v) {

		queue.offer(v);
		isVisited[v] = true;

		while (!queue.isEmpty()) {
			int tmp = queue.poll();

			for (int i = 1; i <= V; i++) {
				if (adjMatrix[tmp][i] != 1 || isVisited[i]) continue;
				
				ans++;
				queue.offer(i);
				isVisited[i] = true;
			}

		}

	}
	
	static void dfs(int v) {
		isVisited[v] = true;

		for (int i = 1; i <= V; i++) {
			if (adjMatrix[v][i] != 1 || isVisited[i]) continue;
			
			ans++;
			dfs(i);
		}

	}
}
