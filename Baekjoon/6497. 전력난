package BJ_6497_전력난;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int M; // 집의 수
	static int N; // 길의 수

	static int cost = 0; // 집끼리 연결하는 가로등의 비용
	static int total = 0; // 전체 비용

	static int[] parents;
	static Edge[] edgeList;

	static class Edge implements Comparable<Edge> {
		int from;
		int to;
		int weight;

		public Edge(int from, int to, int weight) {
			this.from = from;
			this.to = to;
			this.weight = weight;
		}

		@Override
		public int compareTo(Edge o) {
			return this.weight - o.weight;
		}

	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		while (true) {
			st = new StringTokenizer(br.readLine());

			M = Integer.parseInt(st.nextToken());
			N = Integer.parseInt(st.nextToken());

			if (M == 0 && N == 0) break;

			parents = new int[(M + 1)]; // 0은 더미
			edgeList = new Edge[N];

			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				int from = Integer.parseInt(st.nextToken());
				int to = Integer.parseInt(st.nextToken());
				int weight = Integer.parseInt(st.nextToken());

				edgeList[i] = new Edge(from, to, weight);
				total += weight;
			}

			Arrays.sort(edgeList); // 가중치 오름차순 정렬

			makeSet();

			int cnt = 0;

			for (int i = 0; i < N; i++) {
				
				Edge edge = edgeList[i];
				
				if (union(edge.from, edge.to)) { // 대표자가 다르면
					cost += edge.weight; // 가중치 더해주고
					cnt++; // 연결된 간선 수 ++
				}

				if (cnt == M - 1) break; // 다 연결되면 끝
			}
			System.out.println(total - cost); // 합쳐진 최소 비용 출력

		}
	}

	// 단위집합 생성
	public static void makeSet() {
		parents = new int[M + 1]; // 0은 더미

		// 자신의 부모 노드를 자신의 값으로 세팅
		for (int i = 1; i <= M; i++) {
			parents[i] = i;
		}
	}

	// a의 집합 찾기: a의 대표자 찾기
	public static int findSet(int a) {
		if (a == parents[a])
			return a;
		return parents[a] = findSet(parents[a]);
	}

	// a, b 두 집합 합치기
	public static boolean union(int a, int b) {
		int aRoot = findSet(a);
		int bRoot = findSet(b);

		if (aRoot == bRoot) // 대표자가 같으면 합칠 필요 X
			return false;

		parents[bRoot] = aRoot;
		return true;
	}
}
