package BJ_1647_도시분할계획;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
	static int N;
	static int M;
	static int cost = 0;

	static int[] parents; // 대표자
	static Edge[] edgeList; // 간선 리스트

	static class Edge implements Comparable<Edge> {
		int from;
		int to;
		int weight;

		public Edge(int from, int to, int weight) {
			this.from = from;
			this.to = to;
			this.weight = weight;
		}

		@Override
		public int compareTo(Edge o) {
			return this.weight - o.weight;
		}

	}

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		parents = new int[N + 1]; // 0은 더미
		edgeList = new Edge[M];

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int form = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());

			edgeList[i] = new Edge(form, to, weight);
		}

		Arrays.sort(edgeList); // 간선 비용 오름차순 정렬

		makeSet();

		int cnt = 0; // 연결된 간선 수

		for (int i = 0; i < M; i++) {

			Edge edge = edgeList[i];

			if (union(edge.from, edge.to)) {
				cost += edge.weight; // 가중치를 더해주고
				cnt++; //연결된 간선 수++
			}

			if (cnt == N - 2) break; // 다 연결되면 끝
		}

		System.out.println(cost);
	}

	// 단위집합 생성
	public static void makeSet() {
		parents = new int[N + 1]; // 0은 더미

		// 자신의 부모 노드를 자신의 값으로 세팅
		for (int i = 1; i <= N; i++) {
			parents[i] = i;
		}
	}

	// a의 집합 찾기: a의 대표자 찾기
	public static int findSet(int a) {
		if (a == parents[a])
			return a;
		return parents[a] = findSet(parents[a]);
	}

	// a, b 두 집합 합치기
	public static boolean union(int a, int b) {
		int aRoot = findSet(a);
		int bRoot = findSet(b);

		if (aRoot == bRoot) // 대표자가 같으면 합칠 필요 X
			return false;

		parents[bRoot] = aRoot;
		return true;
	}
}
