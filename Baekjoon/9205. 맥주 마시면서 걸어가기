package BJ_9205_맥주마시면서걸어가기;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int T, N;
	static int[][] map; // 상근이집, 편의점, 페스티벌 좌표
	static boolean[] visit; // 방문
	static boolean flag; // 정답을 위한 플래그

	static class Node {
		int x;
		int y;

		public Node(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		T = Integer.parseInt(br.readLine());

		for (int t = 0; t < T; t++) {
			N = Integer.parseInt(br.readLine());

			// 테케 돌때마다 초기화
			map = new int[N + 2][2]; // 배열값에 N+2를 하는 이유? N개의 편의점에 두개의 집과 페스티벌 좌표가 주어지기때문에
			visit = new boolean[N + 2];
			flag = false;

			StringTokenizer st = null;
			for (int i = 0; i < N + 2; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < 2; j++) {
					map[i][j] = Integer.parseInt(st.nextToken()); // 좌표 입력
				}
			}
			visit[0] = true; // 집을 방문 처리
			Queue<Node> queue = new LinkedList<Node>();
			queue.offer(new Node(map[0][0], map[0][1])); // 큐의 집 좌표를 넣어준다.

			while (!queue.isEmpty()) { // 큐가 빌때까지 돌린다.
				Node n = queue.poll(); // 하나를 꺼내온다.

				for (int i = 1; i <= N; i++) {
					if ((Math.abs(n.x - map[i][0]) + Math.abs(n.y - map[i][1])) <= 1000 && !visit[i]) { // 편의점을 하나씩 가져와
																										// 큐안에 좌표와 거리를
																										// 보고 방문하지 않았는지
																										// 확인한다.
						queue.offer(new Node(map[i][0], map[i][1])); // 만약 이동가능하다면 큐에 넣고
						visit[i] = true; // 그 편의점도 방문 처리 해준다.
					}
				}
				if ((Math.abs(n.x - map[N + 1][0]) + Math.abs(n.y - map[N + 1][1])) <= 1000) { // 마지막으로 페스티벌에 도달가능한지
																								// 확인해준다.
					flag = true; // 도달하면 flag를 true로 주가 while문을 빠져 나간다.
					break;
				}
			}

			if (flag) // flag에 따른 출력
				System.out.println("happy");
			else
				System.out.println("sad");
		}
	}
}
