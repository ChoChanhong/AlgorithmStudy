package BJ_16173_점프왕쩰리;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	static int N; // 게임 구역의 크기
	static boolean isArrived; // 도착 여부
	
	static int[][] map;
	static boolean isVisited[][];

	// 우, 하
	static int[] dy = { 0, 1 };
	static int[] dx = { 1, 0 };

	static Queue<Node> queue = new ArrayDeque<>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());

		map = new int[N][N];
		isVisited = new boolean[N][N];

		// 입력
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		bfs();
		
		if (isArrived) {
			System.out.println("HaruHaru");
		} else {
			System.out.println("Hing");
		}
	}

	static class Node {
		int y;
		int x;

		public Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
	
	private static void bfs() {
		queue.add(new Node(0, 0));

		isArrived = false;

		while (!queue.isEmpty()) {

			Node tmp = queue.poll();

			if (map[tmp.y][tmp.x] == -1) { // 도착하면 브레이크
				isArrived = true;
				break;
			}

			if (isVisited[tmp.y][tmp.x])
				continue; // 방문했으면 패스

			for (int d = 0; d < 2; d++) {
				int ny = tmp.y + dy[d] * map[tmp.y][tmp.x];
				int nx = tmp.x + dx[d] * map[tmp.y][tmp.x];

				if (ny < 0 || nx < 0 || ny >= N || nx >= N) continue;

				isVisited[tmp.y][tmp.x] = true;
				queue.offer(new Node(ny, nx));
			}
		}
	}
}
