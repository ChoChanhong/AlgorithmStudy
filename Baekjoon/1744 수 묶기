package BJ_1744_수묶기;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.PriorityQueue;

public class Main {

	static int N;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		N = Integer.parseInt(br.readLine()); // 카드 묶음의 수 저장하기
		
		// 양수는 내림차순 정렬
		PriorityQueue<Integer> plus = new PriorityQueue<>(Collections.reverseOrder());
		PriorityQueue<Integer> minus = new PriorityQueue<>();
		
		int one = 0;
		int zero = 0;
		
		for (int i = 0; i < N; i++) {
			int data = Integer.parseInt(br.readLine());
			
			if ( data > 1 ) {
				plus.add(data);
			} else if ( data == 1 ) {
				one++;
			} else if ( data == 0 ) {
				zero++;
			} else {
				minus.add(data);
			}
		}
		
		int sum = 0;
		
		// 양수 처리하기
		while ( plus.size() > 1 ) {
			int first = plus.remove();
			int second = plus.remove();
			
			sum += first * second;
		}
		if ( !plus.isEmpty() ) {
			sum += plus.remove();
		}
		
		// 음수 처리하기
		while ( minus.size() > 1 ) {
			int first = minus.remove();
			int second = minus.remove();
			
			sum += first * second;
		}
		if ( !minus.isEmpty() ) {
			if ( zero == 0 ) {
				sum += minus.remove();
			}
		}
		
		// 1 처리
		sum += one;
		System.out.println(sum);
	}
}
