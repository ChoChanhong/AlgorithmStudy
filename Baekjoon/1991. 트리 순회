package BJ_1991_트리순회;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static int idx = 0;
	static String[] strings;
	static Node[] nodes;

	static class Node {
		char idx;
		Node left = null;
		Node right = null;

		public Node(char idx) {
			this.idx = idx;
		}

		public void print() {
			System.out.println(idx + " " + left + " " + right);
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int n = Integer.parseInt(br.readLine());
		strings = new String[n];

		nodes = new Node[n];
		for (int i = 0; i < n; i++)
			nodes[i] = new Node((char) ('A' + i));

		for (int i = 0; i < n; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			char idx = st.nextToken().charAt(0);
			char left = st.nextToken().charAt(0);
			char right = st.nextToken().charAt(0);

			if (left != '.')
				nodes[idx - 'A'].left = nodes[left - 'A'];
			if (right != '.')
				nodes[idx - 'A'].right = nodes[right - 'A'];
		}

		preorder(nodes[0]);
		for (String string : strings)
			System.out.print(string);
		System.out.println();
		idx = 0;

		inorder(nodes[0]);
		for (String string : strings)
			System.out.print(string);
		System.out.println();
		idx = 0;

		postorder(nodes[0]);
		for (String string : strings)
			System.out.print(string);

	}

	// 전위
	static void preorder(Node parent) {
		strings[idx++] = String.valueOf(parent.idx);
		if (parent.left != null)
			preorder(parent.left);
		if (parent.right != null)
			preorder(parent.right);
	}

	// 중위
	static void inorder(Node parent) {
		if (parent.left != null)
			inorder(parent.left);
		strings[idx++] = String.valueOf(parent.idx);
		if (parent.right != null)
			inorder(parent.right);
	}

	// 후위
	static void postorder(Node parent) {
		if (parent.left != null)
			postorder(parent.left);
		if (parent.right != null)
			postorder(parent.right);
		strings[idx++] = String.valueOf(parent.idx);
	}
}
