package BJ_2468_안전영역;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main_DFS {

	static int N;
	static int highest; // 최고높이
	static int cnt; // 안전 영역 수 카운트
	static int Max = Integer.MIN_VALUE; // 최대 안전 영역 수
	
	static int[][] map;
	static boolean[][] isChecked;

	// 상, 하, 좌, 우
	static int[] dy = { 1, -1, 0, 0 };
	static int[] dx = { 0, 0, -1, 1 };
	
	public static ArrayList<Integer> al = new ArrayList<>();

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());

		map = new int[N][N];
		isChecked = new boolean[N][N];

		// 입력
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				highest = Math.max(map[i][j], highest);
			}
		}

		for (int h = 0; h <= highest; h++) {
			cnt = 0;
			
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (isChecked[i][j]) continue;
					if (map[i][j] > h) {
						cnt++;
						dfs(new Node(i, j), h);
					}
				}
			}

			Max = Math.max(Max, cnt);
			
			// 방문 체크 초기화
			for (boolean a[] : isChecked)
				Arrays.fill(a, false);
		}
		System.out.println(Max);
	}

	static class Node {
		int y;
		int x;
		public Node(int y, int x) {
			this.y = y;
			this.x = x;
		}
	}
	
	static void dfs(Node n, int h) {
		isChecked[n.y][n.x] = true;

		for (int i = 0; i < 4; i++) {
			int ny = n.y + dy[i];
			int nx = n.x + dx[i];

			if (ny < 0 || nx < 0 || ny >= N || nx >= N || isChecked[ny][nx]) continue;
			if (map[ny][nx] > h) {
				dfs(new Node(ny, nx), h);
			}
		}
	}
}
