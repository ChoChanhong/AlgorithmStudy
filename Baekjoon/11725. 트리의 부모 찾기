package BJ_11725_트리의부모찾기;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_BFS {

	static int N; // 노드의 수
	static ArrayList<Integer>[] al; // 인접 리스트
	static boolean[] isVisited; // 방문 여부

	static int[] parents; // 부모 노드 번호를 담을 배열

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		StringBuilder sb = new StringBuilder();

		N = Integer.parseInt(br.readLine());

		al = new ArrayList[N + 1];
		isVisited = new boolean[N + 1];
		parents = new int[N + 1];

		// ArrayList 초기화
		for (int i = 1; i <= N; i++) {
			al[i] = new ArrayList<>();
		}

		// 트리 만들기
		for (int n = 0; n < N - 1; n++) {
			st = new StringTokenizer(br.readLine());

			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());

			// 양방향
			al[from].add(to);
			al[to].add(from);
		}

		bfs(1); // 1이 루트 노드

		// 출력
		for (int n = 2; n <= N; n++) { // 2번 노드부터 출력!
			sb.append(parents[n]).append("\n");
		}

		System.out.println(sb);
	}

	static Queue<Integer> queue = new ArrayDeque<>();

	static void bfs(int v) {
		// 시작 정점 넣고, 방문 체크
		queue.offer(v);
		isVisited[v] = true;

		while (!queue.isEmpty()) {
			int tmp = queue.poll();

			for (int n : al[tmp]) {
				if (isVisited[n])
					continue; // 방문했으면 패스!!

				parents[n] = tmp; // n의 부모 노드는 tmp

				queue.offer(n);
				isVisited[n] = true;
			}

		}
	}
}
