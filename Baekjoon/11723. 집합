package BJ_11723_집합;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		StringBuilder sb = new StringBuilder();
	
		int M = Integer.parseInt(br.readLine()); // 연산의 수
		int S = 0; // 비어있는 공집합
		
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			
			String op = st.nextToken();
			int x = 0;
			
			switch (op) {
			
			case "add": // S에 x를 추가
				x = Integer.parseInt(st.nextToken());
				S |= (1 << (x - 1)); // index번째 비트 켜기
				break;
			
			case "remove": // S에서 x를 제거
				x = Integer.parseInt(st.nextToken());
				S &= ~(1 << (x - 1)); // index번째 비트 끄기
				break;
			
			case "check": // S에 x가 있으면 1을, 없으면 0을 출력한다.
				x = Integer.parseInt(st.nextToken());
				// index번째 비트가 있는지 확인하기
				sb.append( ((S & (1 << (x - 1))) != 0) ? "1\n" : "0\n" );
				break;
			
			case "toggle": // S에 x가 있으면 x를 제거하고, 없으면 x를 추가한다.
				x = Integer.parseInt(st.nextToken());
				S = S ^ 1 << (x - 1); // index번째에 대한 XOR 연산
				break;
			
			case "all": // S를 {1, 2, ..., 20} 으로 바꾼다.
				S = (1 << 20) - 1; // 집합의 모든 비트를 켜기
				break;
			
			case "empty": // S를 공집합으로 바꾼다.
				S = 0;
				break;
			}
		}
		System.out.println(sb);
	}
}
