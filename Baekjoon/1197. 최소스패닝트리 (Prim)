package BJ_1197_최소스패닝트리;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main_Prim {

	static int total;
	static List<Edge>[] list;
	static boolean[] isVisited;

	static class Edge implements Comparable<Edge> {
		int to;
		int weight;

		public Edge(int to, int weight) {
			this.to = to;
			this.weight = weight;
		}

		@Override
		public int compareTo(Edge o) {
			return this.weight - o.weight;
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		StringTokenizer st = new StringTokenizer(br.readLine());

		int v = Integer.parseInt(st.nextToken());
		int e = Integer.parseInt(st.nextToken());

		list = new ArrayList[v + 1];
		isVisited = new boolean[v + 1];
		for (int i = 1; i < v + 1; i++) {
			list[i] = new ArrayList<>();
		}

		for (int i = 0; i < e; i++) {
			st = new StringTokenizer(br.readLine());
			
			int f = Integer.parseInt(st.nextToken());
			int t = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			
			list[f].add(new Edge(t, w));
			list[t].add(new Edge(f, w));
		}

		prim(1);
		System.out.println(total);
	}

	static void prim(int start) {
		Queue<Edge> pqueue = new PriorityQueue<>();

		pqueue.offer(new Edge(start, 0));
		while (!pqueue.isEmpty()) {
			Edge tmp = pqueue.poll();
			int to = tmp.to;
			int weight = tmp.weight;

			if (isVisited[to]) continue;
			isVisited[to] = true;
			total += weight;

			for (Edge e : list[to]) {
				if (!isVisited[e.to]) {
					pqueue.offer(e);
				}
			}
		}

	}
}
