package BJ_11403_경로찾기;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int N; // 정점의 개수
	static int[][] matrix; // 인접 행렬
	static boolean[][] isVisited;

	public static void main(String[] args) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());

		matrix = new int[N][N];
		isVisited = new boolean[N][N];

		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < N; j++) {
				matrix[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i = 0; i < N; i++) {
			bfs(i);
		}

		// 출력
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.print(matrix[i][j] + " ");
			}
			System.out.println();
		}
	}

	static Queue<Integer> queue = new ArrayDeque<>();

	static void bfs(int start) {

		queue.offer(start);

		while (!queue.isEmpty()) {

			int tmp = queue.poll();

			for (int end = 0; end < N; end++) {

				if (matrix[tmp][end] != 1 || isVisited[start][end])
					continue;

				matrix[start][end] = 1;
				isVisited[start][end] = true;

				queue.offer(end);
			}
		}
	}
}
