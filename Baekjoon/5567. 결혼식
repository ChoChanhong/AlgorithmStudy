package BJ_5567_결혼식;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

	static int N; // 동기의 수
	static int M; // 리스트의 길이

	static int[][] adjMatrix; // 인접행렬
	static int[] depth;
	static int cnt = 0; // 초대할 사람 수

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());

		adjMatrix = new int[N + 1][N + 1];
		depth = new int[N + 1];

		// 인접 행렬
		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());

			int from = Integer.parseInt(st.nextToken());
			int to = Integer.parseInt(st.nextToken());

			adjMatrix[from][to] = adjMatrix[to][from] = 1; // 양방향 그래프
		}

		bfs();

		System.out.println(cnt);
	}

	static Queue<Integer> queue = new ArrayDeque<>();
	public static void bfs() {
		queue.offer(1); // 상근이가 1번
		depth[1]++;

		while ( !queue.isEmpty() ) {
			int tmp = queue.poll();

			if (depth[tmp] >= 3) break; // 친구의 친구까지 체크

			for (int n = 1; n <= N; n++) {
				if ( adjMatrix[tmp][n] != 1 || depth[n] != 0 ) continue; // 간선이 없거나, 친구관계라면 패쓰!
				
				queue.offer(n);
				depth[n] = depth[tmp] + 1; // 한 다리 건너 친구
				cnt++;
			}
		}
	}
}
